# -*- coding: utf-8 -*-
"""Movie_Title_Prediction_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ypYq-I8e7j-d8GatFkNitJt2DNp4_tLg

**Importing Libraries**
"""

import pandas as pd
import numpy as np

import tensorflow as tf

"""**Mounting Drive**"""

from google.colab import drive
drive.mount('/content/drive')

"""**Reading Data**"""

df = pd.read_csv('/content/drive/MyDrive/Movies_Title.csv')

df.head()

df.shape

df.info()

"""### Here I am interested only in one variable named 'title'"""

df = df['title']
df.head()

"""**Converting title in to list**"""

mv_names = df.to_list()

mv_names[:10]

"""**Creating Tokens for the list of title**"""

tokenizer = tf.keras.preprocessing.text.Tokenizer()
tokenizer.fit_on_texts(mv_names)

"""**Creating sequence of the tokens**"""

sqnc = tokenizer.texts_to_sequences(mv_names)

"""**Creating Input data and output data**

### Input data takes all the words from the list except 1st word and output data take word which is consecutive to that word.
"""

X = []
y = []

for i in sqnc:
    if len(i) > 1:
        for index in range(1, len(i)):
            X.append(i[:index])
            y.append(i[index])

X[:10]

y[:10]

"""**Padding the Input Data Sequences**

### As lenght of the input data sequences is varing, so i need to pad the sequences
"""

X = tf.keras.preprocessing.sequence.pad_sequences(X)

X[5]

"""**Label Encoding the output data**"""

y = tf.keras.utils.to_categorical(y)

y.shape

"""**Vocabulary Size**"""

vocab_size = len(tokenizer.word_index) + 1

vocab_size

"""**Model Training**

### Defining Model Architecture
"""

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, 14),
    tf.keras.layers.LSTM(1000, return_sequences=True),
    tf.keras.layers.LSTM(1000, return_sequences=True),
    tf.keras.layers.LSTM(1000),
    tf.keras.layers.Dense(1000, activation='relu'),
    tf.keras.layers.Dense(vocab_size, activation='softmax'),
])

"""**Summary of the model**"""

model.summary()

"""**Model Compilation**"""

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.004),
    loss='categorical_crossentropy',
    metrics=['accuracy'])

"""**Fitting the Model**"""

model.fit(X, y, epochs=150)













